@page "/machines/edit"
@using Microsoft.EntityFrameworkCore
@using MachineParkManagement.Models
@inject IDbContextFactory<MachineParkManagementContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Machine</PageTitle>

<div class="container mx-auto mt-10 max-w-xl rounded-lg bg-white p-6 shadow-md">
    <!-- Page Title -->
    <h1 class="mb-6 text-center text-2xl font-semibold text-gray-800">Edit Machine</h1>

    <!-- Edit Form -->
    @if (Machine is null)
    {
        <p class="text-center italic text-gray-500">Loading...</p>
    }
    else
    {
        <EditForm Model="Machine" OnValidSubmit="UpdateMachine" class="space-y-6">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-600" />

            <!-- Hidden Field for ID -->
            <input type="hidden" name="Machine.Id" value="@Machine.Id" />

            <!-- Name Field -->
            <div>
                <label for="name" class="block text-sm font-medium text-gray-700">Name:</label>
                <InputText id="name" @bind-Value="Machine.Name"
                           class="mt-1 block w-full rounded-md border-gray-300 p-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
                <ValidationMessage For="() => Machine.Name" class="text-red-500 text-sm mt-1" />
            </div>

            <!-- Status Field -->
            <div>
                <label for="status" class="block text-sm font-medium text-gray-700">Status:</label>
                <InputSelect id="machineStatus" @bind-Value="Machine.Status"
                             class="mt-1 block w-full rounded-md border-gray-300 p-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                    <option value="" disabled>Select Status</option>
                    <option value="Online">Online</option>
                    <option value="Offline">Offline</option>
                </InputSelect>
                <ValidationMessage For="() => Machine.Status" class="text-red-500 text-sm mt-1" />
            </div>

            <!-- Last Data Field -->
            <div>
                <label for="lastdata" class="block text-sm font-medium text-gray-700">Last Data:</label>
                <InputText id="lastdata" @bind-Value="Machine.LastData"
                           class="mt-1 block w-full rounded-md border-gray-300 p-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
                <ValidationMessage For="() => Machine.LastData" class="text-red-500 text-sm mt-1" />
            </div>

            <!-- Action Buttons -->
            <div class="flex items-center justify-between">
                <button type="submit" class="rounded bg-indigo-500 px-4 py-2 font-medium text-white shadow hover:bg-indigo-600">
                    Save
                </button>
                <a href="/machines" class="font-medium text-indigo-500 hover:text-indigo-600">Back to List</a>
            </div>
        </EditForm>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    [SupplyParameterFromForm]
    private Machine? Machine { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Machine ??= await context.Machine.FirstOrDefaultAsync(m => m.Id == Id);

        if (Machine is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateMachine()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Machine!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MachineExists(Machine!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/machines");
    }

    private bool MachineExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Machine.Any(e => e.Id == id);
    }
}
